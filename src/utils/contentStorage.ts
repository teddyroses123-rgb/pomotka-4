import { SiteContent } from '../types/content';
import { defaultContent } from '../data/defaultContent';
import { saveContentToDatabase, loadContentFromDatabase } from './supabase';

let saveTimeout: NodeJS.Timeout | null = null;
const SAVE_DELAY = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏

export const saveContent = async (content: SiteContent, immediate: boolean = false): Promise<void> => {
  try {
    console.log('üåê –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î...');
    
    if (immediate) {
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
      const dbSaved = await saveContentToDatabase(content);
      if (dbSaved) {
        console.log('‚úÖ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —É—Å–ø–µ—à–Ω–æ');
        window.dispatchEvent(new CustomEvent('contentSaved', { detail: { success: true } }));
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î');
        window.dispatchEvent(new CustomEvent('contentSaved', { detail: { success: false } }));
      }
    } else {
      // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —Å debounce
      if (saveTimeout) {
        clearTimeout(saveTimeout);
      }
      
      saveTimeout = setTimeout(async () => {
        console.log('üåê –û–¢–õ–û–ñ–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...');
        const dbSaved = await saveContentToDatabase(content);
        if (dbSaved) {
          console.log('‚úÖ –û–¢–õ–û–ñ–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —É—Å–ø–µ—à–Ω–æ');
          window.dispatchEvent(new CustomEvent('contentSaved', { detail: { success: true } }));
        } else {
          console.log('‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î');
          window.dispatchEvent(new CustomEvent('contentSaved', { detail: { success: false } }));
        }
      }, SAVE_DELAY);
    }
    
  } catch (error) {
    console.error('‚ùå Error in saveContent:', error);
    try {
      window.dispatchEvent(new CustomEvent('contentSaved', { detail: { success: false, error: error.message } }));
    } catch (localError) {
      console.error('üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', localError);
      window.dispatchEvent(new CustomEvent('contentSaved', { detail: { success: false, error: localError.message } }));
    }
  }
};

export const loadContent = async (): Promise<SiteContent> => {
  try {
    console.log('üåê –ó–ê–ì–†–£–ó–ö–ê –ò–ó –ë–î...');
    
    const dbContent = await loadContentFromDatabase();
    if (dbContent) {
      console.log('‚úÖ –ö–û–ù–¢–ï–ù–¢ –ó–ê–ì–†–£–ñ–ï–ù –ò–ó –ë–î');
      const fixedContent = fixBlockOrder(dbContent);
      return fixedContent;
    }
    
    console.log('‚ö†Ô∏è –ë–î –ü–£–°–¢–ê - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
    
    const defaultFixedContent = fixBlockOrder(defaultContent);
    console.log('üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ë–î...');
    await saveContentToDatabase(defaultFixedContent);
    
    return defaultFixedContent;
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î:', error);
    throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –±–ª–æ–∫–æ–≤
const fixBlockOrder = (content: SiteContent): SiteContent => {
  console.log('üîß Fixing block order');
  console.log('Current blocks:', (content?.blocks || []).map(b => ({ id: b.id, title: b.title, order: b.order, type: b.type })));
  
  const reorderedBlocks = (content?.blocks || []).map(block => {
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –±–ª–æ–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    if (block.id === 'hero') return { ...block, order: 1 };
    if (block.id === 'features') return { ...block, order: 2 };
    if (block.id === 'modules') return { ...block, order: 3 };
    if (block.id === 'can-module') return { ...block, order: 4 };
    if (block.id === 'analog-module') return { ...block, order: 5 }; 
    if (block.id === 'ops-module') return { ...block, order: 6 };
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–ª–æ–∫–∞ –ê–ë–° –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (block.title && (block.title.includes('–ê–ë–°') || block.title.includes('–∞–±—Å'))) {
      console.log(`üéØ Found ABS block: "${block.title}" - setting order = 7`);
      return { ...block, order: 7, type: 'custom' };
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±–ª–æ–∫–∏ - –º–µ–∂–¥—É OPS (6) –∏ –≤–∏–¥–µ–æ (50)
    if (block.type === 'custom') {
      const customBlocks = (content?.blocks || []).filter(b => b.type === 'custom');
      const customIndex = customBlocks.findIndex(b => b.id === block.id);
      const newOrder = 7 + customIndex;
      console.log(`üì¶ Custom block "${block.title}" (${block.id}): ${block.order} -> ${newOrder}`);
      return { ...block, order: newOrder };
    }
    
    // –í–∏–¥–µ–æ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∫–æ–Ω—Ü–µ
    if (block.id === 'videos') return { ...block, order: 50 };
    if (block.id === 'contacts') return { ...block, order: 51 };
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤–æ–π –ø–æ—Ä—è–¥–æ–∫
    return block;
  });
  
  console.log('‚úÖ New block order:', reorderedBlocks.map(b => ({ id: b.id, title: b.title, order: b.order, type: b.type })));
  
  return {
    ...content,
    blocks: reorderedBlocks,
    navigation: content?.navigation || defaultContent.navigation
  };
};

export const loadContentSync = (): SiteContent => {
  throw new Error('–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ loadContent()');
};

export const resetContent = (): SiteContent => {
  throw new Error('–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω–∫—É');
};

export const exportContent = (): string => {
  throw new Error('–≠–∫—Å–ø–æ—Ä—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î');
};

export const importContent = (jsonString: string): SiteContent => {
  try {
    const content = JSON.parse(jsonString);
    return content;
  } catch (error) {
    console.error('‚ùå Error importing content:', error);
    throw new Error('Invalid JSON format');
  }
};

export const forceSyncWithDatabase = async (): Promise<boolean> => {
  throw new Error('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
};

export const loadFromDatabaseAndOverwrite = async (): Promise<SiteContent> => {
  return await loadContent(); // –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
};

export const forceRestoreDefaultContent = async (): Promise<SiteContent> => {
  console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
  const defaultFixedContent = fixBlockOrder(defaultContent);
  await saveContentToDatabase(defaultFixedContent);
  console.log('‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');
  return defaultFixedContent;
};