const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.method);
    const formData = await req.json();
    console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
    
    const token = '8333811204:AAGLp8hqvrQMo615Af36WKYOEWth6MqxO2M';
    const chatId = '7954117398';
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç:', chatId);
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω:', token);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfoResponse = await fetch(`https://api.telegram.org/bot${token}/getMe`);
    const botInfo = await botInfoResponse.json();
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', botInfo);
    
    if (!botInfo.ok) {
      console.error('–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', botInfo);
      return new Response(
        JSON.stringify({ success: false, error: '–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' }),
        {
          status: 500,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          }
        }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç
    try {
      const chatInfoResponse = await fetch(`https://api.telegram.org/bot${token}/getChat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat_id: chatId })
      });
      const chatInfo = await chatInfoResponse.json();
      console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', chatInfo);
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ:', error);
    }

    const message = `üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:
üë§ –ò–º—è: ${formData.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üí¨ Telegram: ${formData.telegramNick || '‚Äî'}
üöó –ê–≤—Ç–æ: ${formData.carBrand} ${formData.carModel} (${formData.year})
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${formData.comment || '‚Äî'}
üì≤ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: ${formData.messenger}`;

    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', message);

    const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message
      })
    });

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Telegram:', response.status);
    const result = await response.json();
    console.log('–û—Ç–≤–µ—Ç Telegram:', result);

    if (response.ok) {
      return new Response(
        JSON.stringify({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' }),
        {
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          }
        }
      );
    } else {
      console.error('–û—à–∏–±–∫–∞ Telegram:', result);
      return new Response(
        JSON.stringify({ success: false, error: result.description }),
        {
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          }
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return new Response(
      JSON.stringify({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        }
      }
    );
  }
});